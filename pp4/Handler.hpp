#ifndef HANDLER_H
#define HANDLER_H

class ArithmeticExpr;
class ArrayAccess;
class ArrayType;
class AssignExpr;
class BoolConstant;
class BreakStmt;
class Call;
class ClassDecl;
class CompoundExpr;
class ConditionalStmt;
class Decl;
class DoubleConstant;
class EmptyExpr;
class EqualityExpr;
class Error;
class Expr;
class FieldAccess;
class FnDecl;
class ForStmt;
class Identifier;
class IfStmt;
class IntConstant;
class InterfaceDecl;
class LValue;
class LogicalExpr;
class LoopStmt;
class NamedType;
class NewArrayExpr;
class NewExpr;
class Node;
class NullConstant;
class Operator;
class PrintStmt;
class Program;
class ReadIntegerExpr;
class ReadLineExpr;
class RelationalExpr;
class ReturnStmt;
class Stmt;
class StmtBlock;
class StringConstant;
class This;
class Type;
class VarDecl;
class WhileStmt;

class Handler{
public:
    virtual void handleArithmeticExpr(ArithmeticExpr * a) = 0;
    virtual void handleArrayAccess(ArrayAccess * a) = 0;
    virtual void handleArrayType(ArrayType * a) = 0;
    virtual void handleAssignExpr(AssignExpr * a) = 0;
    virtual void handleBoolConstant(BoolConstant * b) = 0;
    virtual void handleBreakStmt(BreakStmt * b) = 0;
    virtual void handleCall(Call * c) = 0;
    virtual void handleClassDecl(ClassDecl * c) = 0;
    virtual void handleCompoundExpr(CompoundExpr * c) = 0;
    virtual void handleConditionalStmt(ConditionalStmt * c) = 0;
    virtual void handleDecl(Decl * d) = 0;
    virtual void handleDoubleConstant(DoubleConstant * d) = 0;
    virtual void handleEmptyExpr(EmptyExpr * e) = 0;
    virtual void handleEqualityExpr(EqualityExpr * e) = 0;
    virtual void handleError(Error * e) = 0;
    virtual void handleExpr(Expr * e) = 0;
    virtual void handleFieldAccess(FieldAccess * f) = 0;
    virtual void handleFnDecl(FnDecl * f) = 0;
    virtual void handleForStmt(ForStmt * f) = 0;
    virtual void handleIdentifier(Identifier * i) = 0;
    virtual void handleIfStmt(IfStmt * i) = 0;
    virtual void handleIntConstant(IntConstant * i) = 0;
    virtual void handleInterfaceDecl(InterfaceDecl * i) = 0;
    virtual void handleLValue(LValue * l) = 0;
    virtual void handleLogicalExpr(LogicalExpr * l) = 0;
    virtual void handleLoopStmt(LoopStmt * l) = 0;
    virtual void handleNamedType(NamedType * n) = 0;
    virtual void handleNewArrayExpr(NewArrayExpr * n) = 0;
    virtual void handleNewExpr(NewExpr * n) = 0;
    virtual void handleNode(Node * n) = 0;
    virtual void handleNullConstant(NullConstant * n) = 0;
    virtual void handleOperator(Operator * o) = 0;
    virtual void handlePrintStmt(PrintStmt * p) = 0;
    virtual void handleProgram(Program * p) = 0;
    virtual void handleReadIntegerExpr(ReadIntegerExpr * r) = 0;
    virtual void handleReadLineExpr(ReadLineExpr * r) = 0;
    virtual void handleRelationalExpr(RelationalExpr * r) = 0;
    virtual void handleReturnStmt(ReturnStmt * r) = 0;
    virtual void handleStmt(Stmt * s) = 0;
    virtual void handleStmtBlock(StmtBlock * s) = 0;
    virtual void handleStringConstant(StringConstant * s) = 0;
    virtual void handleThis(This * t) = 0;
    virtual void handleType(Type * t) = 0;
    virtual void handleVarDecl(VarDecl * v) = 0;
    virtual void handleWhileStmt(WhileStmt * w) = 0;
};

#endif
